/*
visibility_polygon.js version 1.5

This code is released into the public domain - attribution is appreciated but not required.
Made by Byron Knoll in 2014.

https://code.google.com/p/visibility-polygon-js/
*/

function VisibilityPolygon(){}
VisibilityPolygon.compute=function(d,c){for(var e=[],f=VisibilityPolygon.sortPoints(d,c),h=Array(c.length),g=0;g<h.length;++g)h[g]=-1;for(var k=[],l=[d[0]+1,d[1]],g=0;g<c.length;++g){var m=VisibilityPolygon.angle(c[g][0],d),n=VisibilityPolygon.angle(c[g][1],d),p=!1;-180<m&&0>=m&&180>=n&&0<=n&&180<n-m&&(p=!0);-180<n&&0>=n&&180>=m&&0<=m&&180<m-n&&(p=!0);p&&VisibilityPolygon.insert(g,k,d,c,l,h)}for(g=0;g<f.length;){var n=m=!1,p=g,l=c[f[g][0]][f[g][1]],q=k[0];do if(-1!=h[f[g][0]]?(f[g][0]==q&&(m=!0,l=
c[f[g][0]][f[g][1]]),VisibilityPolygon.remove(h[f[g][0]],k,d,c,l,h)):(VisibilityPolygon.insert(f[g][0],k,d,c,l,h),k[0]!=q&&(n=!0)),++g,g==f.length)break;while(f[g][2]<f[p][2]+VisibilityPolygon.epsilon());m?(e.push(l),m=VisibilityPolygon.intersectLines(c[k[0]][0],c[k[0]][1],d,l),VisibilityPolygon.equal(m,l)||e.push(m)):n&&(e.push(VisibilityPolygon.intersectLines(c[q][0],c[q][1],d,l)),e.push(VisibilityPolygon.intersectLines(c[k[0]][0],c[k[0]][1],d,l)))}return e};
VisibilityPolygon.inPolygon=function(d,c){for(var e=0,f=0;f<c.length;++f)e=Math.min(c[f][0],e),e=Math.min(c[f][1],e);for(var e=[e-1,e-1],h=0,f=0;f<c.length;++f){var g=f+1;g==c.length&&(g=0);if(VisibilityPolygon.doLineSegmentsIntersect(e[0],e[1],d[0],d[1],c[f][0],c[f][1],c[g][0],c[g][1])){var k=VisibilityPolygon.intersectLines(e,d,c[f],c[g]);if(VisibilityPolygon.equal(d,k))return!0;VisibilityPolygon.equal(k,c[f])?180>VisibilityPolygon.angle2(d,e,c[g])&&++h:VisibilityPolygon.equal(k,c[g])?180>VisibilityPolygon.angle2(d,
e,c[f])&&++h:++h}}return 0!=h%2};VisibilityPolygon.convertToSegments=function(d){for(var c=[],e=0;e<d.length;++e)for(var f=0;f<d[e].length;++f){var h=f+1;h==d[e].length&&(h=0);c.push([d[e][f],d[e][h]])}return c};
VisibilityPolygon.breakIntersections=function(d){for(var c=[],e=0;e<d.length;++e){for(var f=[],h=0;h<d.length;++h)if(e!=h&&VisibilityPolygon.doLineSegmentsIntersect(d[e][0][0],d[e][0][1],d[e][1][0],d[e][1][1],d[h][0][0],d[h][0][1],d[h][1][0],d[h][1][1])){var g=VisibilityPolygon.intersectLines(d[e][0],d[e][1],d[h][0],d[h][1]);2==g.length&&(VisibilityPolygon.equal(g,d[e][0])||VisibilityPolygon.equal(g,d[e][1])||f.push(g))}for(g=d[e][0];0<f.length;){for(var k=0,l=VisibilityPolygon.distance(g,f[0]),h=
1;h<f.length;++h){var m=VisibilityPolygon.distance(g,f[h]);m<l&&(l=m,k=h)}c.push([[g[0],g[1]],[f[k][0],f[k][1]]]);g[0]=f[k][0];g[1]=f[k][1];f.splice(k,1)}c.push([g,d[e][1]])}return c};VisibilityPolygon.epsilon=function(){return 1E-7};VisibilityPolygon.equal=function(d,c){return Math.abs(d[0]-c[0])<VisibilityPolygon.epsilon()&&Math.abs(d[1]-c[1])<VisibilityPolygon.epsilon()?!0:!1};
VisibilityPolygon.remove=function(d,c,e,f,h,g){g[c[d]]=-1;if(d==c.length-1)c.pop();else{c[d]=c.pop();g[c[d]]=d;var k=VisibilityPolygon.parent(d);if(0!=d&&VisibilityPolygon.lessThan(c[d],c[k],e,f,h))for(;0<d;){k=VisibilityPolygon.parent(d);if(!VisibilityPolygon.lessThan(c[d],c[k],e,f,h))break;g[c[k]]=d;g[c[d]]=k;var l=c[d];c[d]=c[k];c[k]=l;d=k}else for(;;){var k=VisibilityPolygon.child(d),m=k+1;if(k<c.length&&VisibilityPolygon.lessThan(c[k],c[d],e,f,h)&&(m==c.length||VisibilityPolygon.lessThan(c[k],
c[m],e,f,h)))g[c[k]]=d,g[c[d]]=k,l=c[k],c[k]=c[d],c[d]=l,d=k;else if(m<c.length&&VisibilityPolygon.lessThan(c[m],c[d],e,f,h))g[c[m]]=d,g[c[d]]=m,l=c[m],c[m]=c[d],c[d]=l,d=m;else break}}};VisibilityPolygon.insert=function(d,c,e,f,h,g){if(0!=VisibilityPolygon.intersectLines(f[d][0],f[d][1],e,h).length){var k=c.length;c.push(d);for(g[d]=k;0<k;){d=VisibilityPolygon.parent(k);if(!VisibilityPolygon.lessThan(c[k],c[d],e,f,h))break;g[c[d]]=k;g[c[k]]=d;var l=c[k];c[k]=c[d];c[d]=l;k=d}}};
VisibilityPolygon.lessThan=function(d,c,e,f,h){var g=VisibilityPolygon.intersectLines(f[d][0],f[d][1],e,h);h=VisibilityPolygon.intersectLines(f[c][0],f[c][1],e,h);if(!VisibilityPolygon.equal(g,h))return c=VisibilityPolygon.distance(g,e),e=VisibilityPolygon.distance(h,e),c<e;var k=0;VisibilityPolygon.equal(g,f[d][0])&&(k=1);var l=0;VisibilityPolygon.equal(h,f[c][0])&&(l=1);d=VisibilityPolygon.angle2(f[d][k],g,e);e=VisibilityPolygon.angle2(f[c][l],h,e);return 180>d?180<e?!0:e<d:d<e};
VisibilityPolygon.parent=function(d){return Math.floor((d-1)/2)};VisibilityPolygon.child=function(d){return 2*d+1};VisibilityPolygon.angle2=function(d,c,e){d=VisibilityPolygon.angle(d,c);c=VisibilityPolygon.angle(c,e);c=d-c;0>c&&(c+=360);360<c&&(c-=360);return c};VisibilityPolygon.sortPoints=function(d,c){for(var e=Array(2*c.length),f=0;f<c.length;++f)for(var h=0;2>h;++h){var g=VisibilityPolygon.angle(c[f][h],d);e[2*f+h]=[f,h,g]}e.sort(function(c,d){return c[2]-d[2]});return e};
VisibilityPolygon.angle=function(d,c){return 180*Math.atan2(c[1]-d[1],c[0]-d[0])/Math.PI};VisibilityPolygon.intersectLines=function(d,c,e,f){var h=(f[0]-e[0])*(d[1]-e[1])-(f[1]-e[1])*(d[0]-e[0]);e=(f[1]-e[1])*(c[0]-d[0])-(f[0]-e[0])*(c[1]-d[1]);return 0!=e?(h/=e,[d[0]-h*(d[0]-c[0]),d[1]-h*(d[1]-c[1])]):[]};VisibilityPolygon.distance=function(d,c){return(d[0]-c[0])*(d[0]-c[0])+(d[1]-c[1])*(d[1]-c[1])};
VisibilityPolygon.isOnSegment=function(d,c,e,f,h,g){return(d<=h||e<=h)&&(h<=d||h<=e)&&(c<=g||f<=g)&&(g<=c||g<=f)};VisibilityPolygon.computeDirection=function(d,c,e,f,h,g){a=(h-d)*(f-c);b=(e-d)*(g-c);return a<b?-1:a>b?1:0};
VisibilityPolygon.doLineSegmentsIntersect=function(d,c,e,f,h,g,k,l){d1=VisibilityPolygon.computeDirection(h,g,k,l,d,c);d2=VisibilityPolygon.computeDirection(h,g,k,l,e,f);d3=VisibilityPolygon.computeDirection(d,c,e,f,h,g);d4=VisibilityPolygon.computeDirection(d,c,e,f,k,l);return(0<d1&&0>d2||0>d1&&0<d2)&&(0<d3&&0>d4||0>d3&&0<d4)||0==d1&&VisibilityPolygon.isOnSegment(h,g,k,l,d,c)||0==d2&&VisibilityPolygon.isOnSegment(h,g,k,l,e,f)||0==d3&&VisibilityPolygon.isOnSegment(d,c,e,f,h,g)||0==d4&&VisibilityPolygon.isOnSegment(d,
c,e,f,k,l)};
